services:
  
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop2.7.4-java8
    volumes:
      - namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop-hive.env
    ports:
      - "50070:50070"
  
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop2.7.4-java8
    volumes:
      - datanode:/hadoop/dfs/data
    env_file:
      - ./hadoop-hive.env
    environment:
      SERVICE_PRECONDITION: "namenode:50070"
    ports:
      - "50075:50075"
  
  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    env_file:
      - ./hadoop-hive.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    ports:
      - "10000:10000"
  
  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    env_file:
      - ./hadoop-hive.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:50070 datanode:50075 hive-metastore-postgresql:5432"
    ports:
      - "9083:9083"
  
  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql:2.3.0
  
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9092,INTERNAL://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092, INTERNAL://kafka:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CREATE_TOPICS: "send_all_messages:1:1,check_message:1:1,send_message:1:1,ia_message:1:1,get_all_messages:1:1,register:1:1,login:1:1,send_users:1:1,get_users:1:1"
      KAFKA_LOG_RETENTION_BYTES: 1073741824
    depends_on:
      - zookeeper
  
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
  
  postgres-airflow:
    image: postgres:15
    container_name: postgres-airflow
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
      - POSTGRES_HOST_AUTH_METHOD=md5
    ports:
      - "5433:5432"

  airflow:
    build:
      context: .
      dockerfile: ./airflow/Dockerfile-airflow
    container_name: airflow
    depends_on:
      - postgres-airflow
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__FERNET_KEY=Lun1uazC_dvkd-kgrYDbBn7wY4OGxrMW-Ns4iRdJ_-4=
      - AIRFLOW__CORE__DEFAULT_TIMEZONE=Europe/Paris
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow
      - AIRFLOW__CORE__DAGS_FOLDER=/usr/local/airflow/dags
    command: >
      bash -c "
      airflow db init;
      airflow users create --username admin --password admin --firstname admin --lastname admin --role Admin --email admin@example.com || true;
      airflow webserver &
      airflow scheduler
      "
    ports:
      - "18080:8080"
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
      - ./airflow/plugins:/usr/local/airflow/plugins
      - ./airflow/logs:/usr/local/airflow/logs
      - airflow_db_volume:/var/lib/postgresql/data
      - ./airflow/requirements.txt:/requirements.txt

  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - ./app:/app
      - ./conf:/opt/hive/conf
    environment:
      - INIT_DAEMON_STEP=setup_spark
    command: >
      bash -c "/spark/bin/spark-submit --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.3.0 /app/save_data.py" 

  spark-worker-1:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - SPARK_MASTER=spark://spark-master:7077

  superset:
    build:
      context: ./superset
      dockerfile: Dockerfile-superset
    container_name: superset
    restart: always
    ports:
      - "8089:8088"
    environment:
      - SUPERSET_SECRET_KEY=mysecretkey
      - PYTHONPATH=/app/pythonpath
    depends_on:
      - hive-server
      - postgres-airflow
    volumes:
      - ./superset_home:/app/superset_home
    command: >
      bash -c "
      superset db upgrade &&
      superset fab create-admin --username admin --firstname Superset --lastname Admin --email admin@superset.com --password admin || true &&
      superset init &&
      superset run -h 0.0.0.0 -p 8088
      "

  nifi:
    image: apache/nifi:latest
    container_name: nifi
    restart: always
    ports:
      - "8082:8080"
      - "8443:8443"
    environment:
      - NIFI_WEB_HTTP_PORT=8080
      - NIFI_WEB_HTTPS_PORT=8443
      - SINGLE_USER_CREDENTIALS_USERNAME=admin
      - SINGLE_USER_CREDENTIALS_PASSWORD=admin
    volumes:
      - ./nifi/conf:/opt/nifi/nifi-current/conf
      - ./nifi/content_repository:/opt/nifi/nifi-current/content_repository
      - ./nifi/database_repository:/opt/nifi/nifi-current/database_repository
      - ./nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - ./nifi/logs:/opt/nifi/nifi-current/logs
      - ./nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - ./nifi/state:/opt/nifi/nifi-current/state
    depends_on:
      - kafka
  
  ia:
    build: ./ia
    container_name: ia
    restart: always
    ports:
      - "5052:5052"
    volumes:
      - ./ia:/app
      - ./saved_model:/saved_model
    environment:
      - FLASK_ENV=development
    depends_on:
      - nifi
  
  backend:
    build: ./back
    container_name: back
    ports:
      - "5000:5000"
    volumes:
      - ./back:/app
    environment:
      - FLASK_ENV=development
    depends_on:
      - frontend

  frontend:
    build: ./frontend
    container_name: front
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  namenode:
  datanode:
  airflow_db_volume:

